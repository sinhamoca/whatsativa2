// quick-test.js - Teste r√°pido do sistema ap√≥s corre√ß√µes
const DatabaseService = require('./database-service');

async function quickTest() {
    console.log('üß™ TESTE R√ÅPIDO DO SISTEMA');
    console.log('‚ïê'.repeat(50));

    const db = new DatabaseService('./database.sqlite');
    
    try {
        await db.initialize();
        
        // 1. Verificar se h√° erros cr√≠ticos recentes
        console.log('üîç Verificando erros recentes...');
        
        const recentErrors = await db.all(`
            SELECT * FROM orders 
            WHERE error LIKE '%erro interno critico%' 
            OR error LIKE '%cr√≠tico%'
            ORDER BY created_at DESC 
            LIMIT 5
        `);
        
        if (recentErrors.length > 0) {
            console.log('‚ùå ERROS CR√çTICOS ENCONTRADOS:');
            recentErrors.forEach(order => {
                console.log(`   üì¶ ${order.id.substring(0, 8)}... | ${order.status}`);
                console.log(`      üí• ${order.error}`);
                console.log(`      üìÖ ${order.created_at}`);
                console.log('');
            });
        } else {
            console.log('‚úÖ Nenhum erro cr√≠tico recente encontrado');
        }
        
        // 2. Verificar estado das tabelas
        console.log('\nüìä Estado das tabelas:');
        
        const ordersCount = await db.get('SELECT COUNT(*) as count FROM orders');
        const sessionsCount = await db.get('SELECT COUNT(*) as count FROM user_sessions');
        const productsCount = await db.get('SELECT COUNT(*) as count FROM products');
        
        console.log(`   üìã Pedidos: ${ordersCount.count}`);
        console.log(`   üë• Sess√µes: ${sessionsCount.count}`);
        console.log(`   üì± Produtos: ${productsCount.count}`);
        
        // 3. Verificar produtos ativos
        console.log('\nüì± Produtos ativos:');
        const activeProducts = await db.all('SELECT * FROM products WHERE active = 1');
        activeProducts.forEach(product => {
            console.log(`   ‚úÖ ${product.name} - R$ ${product.price} (${product.activation_module || 'sem m√≥dulo'})`);
        });
        
        // 4. Verificar √∫ltimas sess√µes
        console.log('\nüë• √öltimas sess√µes:');
        const recentSessions = await db.all(`
            SELECT * FROM user_sessions 
            ORDER BY updated_at DESC 
            LIMIT 3
        `);
        
        recentSessions.forEach(session => {
            console.log(`   üë§ ${session.chat_id.substring(0, 15)}...`);
            console.log(`      Estado: ${session.state || 'null'}`);
            console.log(`      Cr√©dito: R$ ${session.available_credit || 0}`);
            console.log(`      Atualizado: ${session.updated_at}`);
        });
        
        // 5. Sugest√µes de corre√ß√£o
        console.log('\nüí° SUGEST√ïES:');
        
        if (recentErrors.length > 0) {
            console.log('üîß Para corrigir erros:');
            console.log('   1. Execute: node debug-activation-flow.js');
            console.log('   2. Reinicie o sistema: pm2 restart all');
            console.log('   3. Verifique logs: pm2 logs core-system');
        }
        
        // Verificar sess√µes problem√°ticas
        const problemSessions = await db.all(`
            SELECT COUNT(*) as count FROM user_sessions 
            WHERE state = 'awaiting_activation_info'
        `);
        
        if (problemSessions[0].count > 0) {
            console.log(`‚ö†Ô∏è ${problemSessions[0].count} sess√µes aguardando ativa√ß√£o`);
            console.log('   Execute: node debug-activation-flow.js clean');
        }
        
        console.log('\n‚ïê'.repeat(50));
        console.log('üèÅ TESTE CONCLU√çDO');
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
    } finally {
        await db.close();
    }
}

// Executar teste
if (require.main === module) {
    quickTest();
}

module.exports = quickTest;
