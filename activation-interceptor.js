// activation-interceptor.js - Interceptor N√£o Invasivo para WhatsApp Handler
const pino = require('pino');

class ActivationInterceptor {
    constructor(activationBlockerService) {
        this.blocker = activationBlockerService;
        this.logger = pino({ level: 'info' });
    }

    /**
     * Intercepta mensagens antes do processamento normal
     * Retorna null se deve continuar processamento normal
     * Retorna objeto de resposta se deve bloquear a mensagem
     * 
     * @param {string} chatId - ID do chat
     * @param {string} messageText - Texto da mensagem (j√° em lowercase e trim)
     * @param {object} userSession - Sess√£o do usu√°rio
     * @returns {null|object} - null para continuar, objeto para bloquear
     */
    interceptMessage(chatId, messageText, userSession) {
        // Verificar se usu√°rio est√° bloqueado
        const blockInfo = this.blocker.isUserBlocked(chatId);
        
        if (!blockInfo) {
            // Usu√°rio n√£o est√° bloqueado, continuar processamento normal
            return null;
        }

        this.logger.info(`üîí INTERCEPTANDO mensagem de usu√°rio bloqueado ${chatId}: "${messageText}"`);

        // === COMANDOS ESPECIAIS PERMITIDOS DURANTE BLOQUEIO ===
        
        // Comando de suporte sempre permitido
        if (this.isSupportCommand(messageText)) {
            this.logger.info(`üÜò Comando suporte permitido mesmo durante bloqueio para ${chatId}`);
            return null; // Permitir processamento normal
        }

        // Comando para for√ßar cancelamento (emerg√™ncia)
        if (this.isCancelCommand(messageText)) {
            this.logger.warn(`‚ùå Comando cancelar durante bloqueio para ${chatId}`);
            
            // Desbloquear usu√°rio
            this.blocker.unblockUser(chatId, 'user_cancelled');
            
            return {
                reply: `‚ùå *ATIVA√á√ÉO CANCELADA*

üîÑ Processo de ativa√ß√£o do ${this.blocker.getModuleFriendlyName(blockInfo.moduleId)} foi interrompido pelo usu√°rio.

üí° Voc√™ pode tentar novamente digitando *menu*.

‚ö†Ô∏è *Importante:* Se a ativa√ß√£o j√° estava em andamento, ela pode ainda ser conclu√≠da em segundo plano. Entre em contato com o suporte se tiver d√∫vidas.`
            };
        }

        // === BLOQUEAR TODOS OS OUTROS COMANDOS ===
        
        // Comandos espec√≠ficos que seriam problem√°ticos
        if (this.isMenuCommand(messageText)) {
            this.logger.warn(`üö´ Tentativa de acessar MENU durante bloqueio: ${chatId}`);
        } else if (this.isVerifyCommand(messageText)) {
            this.logger.warn(`üö´ Tentativa de VERIFICAR durante bloqueio: ${chatId}`);
        } else if (this.isProductSelection(messageText)) {
            this.logger.warn(`üö´ Tentativa de selecionar produto durante bloqueio: ${chatId}`);
        } else {
            this.logger.info(`üîí Mensagem gen√©rica bloqueada: ${chatId} - "${messageText}"`);
        }

        // Retornar mensagem de bloqueio
        return {
            reply: this.blocker.getBlockMessage(chatId)
        };
    }

    /**
     * Notifica o interceptor sobre o in√≠cio de uma ativa√ß√£o
     * @param {string} chatId - ID do chat
     * @param {string} moduleId - ID do m√≥dulo
     * @param {string} orderId - ID do pedido
     */
    notifyActivationStart(chatId, moduleId, orderId) {
        const blocked = this.blocker.blockUser(chatId, moduleId, orderId);
        
        if (blocked) {
            this.logger.info(`üîí ATIVA√á√ÉO INICIADA - Usu√°rio ${chatId} bloqueado para ${moduleId}`);
        }
        
        return blocked;
    }

    /**
     * Notifica o interceptor sobre a conclus√£o de uma ativa√ß√£o
     * @param {string} chatId - ID do chat
     * @param {boolean} success - Se a ativa√ß√£o foi bem-sucedida
     * @param {string} reason - Motivo da conclus√£o
     */
    notifyActivationEnd(chatId, success, reason = 'completed') {
        const unblocked = this.blocker.unblockUser(chatId, success ? 'completed' : 'failed');
        
        if (unblocked) {
            this.logger.info(`üîì ATIVA√á√ÉO CONCLU√çDA - Usu√°rio ${chatId} desbloqueado (sucesso: ${success})`);
        }
        
        return unblocked;
    }

    // === VERIFICADORES DE COMANDO (C√ìPIA DOS M√âTODOS DO WHATSAPP HANDLER) ===

    isSupportCommand(messageText) {
        return ['/suporte', 'suporte', 'ajuda', 'help'].includes(messageText);
    }

    isCancelCommand(messageText) {
        return ['cancelar', 'parar', 'stop', 'cancel', '/cancel'].includes(messageText);
    }

    isMenuCommand(messageText) {
        return ['/start', 'menu', 'oi', 'ol√°', 'inicio'].includes(messageText);
    }

    isVerifyCommand(messageText) {
        return ['verificar', 'pago', 'verifique', 'check'].includes(messageText);
    }

    isProductSelection(messageText) {
        // Verificar se √© um n√∫mero (sele√ß√£o de produto)
        const num = parseInt(messageText);
        if (num > 0 && num <= 20) { // Assumindo m√°ximo 20 produtos
            return true;
        }
        
        // Verificar nomes comuns de produtos
        const productKeywords = ['duplexplay', 'ibosol', 'iptv', 'tv', 'duplex'];
        return productKeywords.some(keyword => messageText.includes(keyword));
    }

    // === M√âTODOS DE UTILIT√ÅRIO ===

    /**
     * Obt√©m estat√≠sticas do interceptor
     */
    getStats() {
        return {
            ...this.blocker.getStats(),
            interceptorActive: true
        };
    }

    /**
     * Lista usu√°rios bloqueados
     */
    getBlockedUsers() {
        return this.blocker.getBlockedUsers();
    }

    /**
     * For√ßa desbloqueio (para admin)
     */
    forceUnblock(chatId) {
        return this.blocker.forceUnblock(chatId);
    }
}

module.exports = ActivationInterceptor;
